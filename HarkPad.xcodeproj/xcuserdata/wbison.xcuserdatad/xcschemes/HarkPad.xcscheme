<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "0430"
   version = "1.8">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "E5E722F31311A12C00905959"
               BuildableName = "HarkPad.app"
               BlueprintName = "HarkPad"
               ReferencedContainer = "container:HarkPad.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.GDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.GDB"
      shouldUseLaunchSchemeArgsEnv = "YES"
      buildConfiguration = "Debug">
      <Testables>
      </Testables>
   </TestAction>
   <LaunchAction
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      displayScaleIsEnabled = "NO"
      displayScale = "1.00"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      buildConfiguration = "Debug"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "E5E722F31311A12C00905959"
            BuildableName = "HarkPad.app"
            BlueprintName = "HarkPad"
            ReferencedContainer = "container:HarkPad.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
      <EnvironmentVariables>
         <EnvironmentVariable
            key = "NSZombieEnabled"
            value = "YES"
            isEnabled = "YES">
         </EnvironmentVariable>
      </EnvironmentVariables>
      <AdditionalOptions>
      </AdditionalOptions>
   </LaunchAction>
   <ProfileAction
      displayScaleIsEnabled = "NO"
      displayScale = "1.00"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      buildConfiguration = "Release"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "E5E722F31311A12C00905959"
            BuildableName = "HarkPad.app"
            BlueprintName = "HarkPad"
            ReferencedContainer = "container:HarkPad.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
      <PostActions>
         <ExecutionAction
            ActionType = "Xcode.IDEStandardExecutionActionsCore.ExecutionActionType.ShellScriptAction">
            <ActionContent
               title = "Run Script"
               scriptText = "#!/bin/bash&#10;#&#10;# (Above line comes out when placing in Xcode scheme)&#10;#&#10;# Inspired by original script by incanus:&#10;# https://gist.github.com/1186990&#10;#&#10;# Rewritten by martijnthe:&#10;# https://gist.github.com/1379127&#10;#&#10;# - Using Xcode&apos;s environment variables instead of &apos;guessing&apos; what archive we need to upload&#10;# - AppleScript dialogs for basic user interaction (upload yes/no, select code signing identity, enter release notes, )&#10;#&#10;#&#10;# =====================================================================================================================&#10;# ***  BASIC CONFIGURATION:&#10;#&#10;# Find your API_TOKEN at: https://testflightapp.com/account/&#10;API_TOKEN=&quot;64c7394c3f8507999809cd493b267759_NjkxNDQyMDEyLTAzLTA4IDA3OjU2OjI4LjI4MDQwOQ&quot;&#10;#&#10;# Find your TEAM_TOKEN at: https://testflightapp.com/dashboard/team/edit/&#10;TEAM_TOKEN=&quot;c42313afe321b6cc208e42e8f288afe6_NjkxNDUyMDEyLTAzLTA3IDA3OjUxOjIxLjI2NDUxNw&quot;&#10;#&#10;# Distribution List names, comma separated (quoted) string, e.g. &quot;DevTeam,Clients,BetaTesters&quot;:&#10;DISTRIBUTION_LISTS=DevTeam,Clients,BetaTesters&#10;#&#10;# Default selection of Distribution List(s), e.g. &quot;DevTeam,Clients&quot;:&#10;DISTRIBUTION_LISTS_DEFAULT_SELECTION=DevTeam,Clients&#10;#&#10;# Default selection for the Notify team members dialog (&quot;True&quot; -&gt; Notify team members, &quot;False&quot; -&gt; Don&apos;t notify):&#10;DEFAULT_NOTIFY_VALUE=&quot;True&quot;&#10;#&#10;# =====================================================================================================================&#10;# ***  OPTIONAL CONFIGURATION:&#10;#&#10;# Uncomment this line to skip the resigning / re-provisioning steps:&#10;# The application is expected to be already provisioned and signed.&#10;#&#10;# SKIP_RESIGNING_AND_REPROVISIONING=&quot;YES&quot;&#10;#&#10;# Uncomment this line to skip the Release Notes input step and to set a default value:&#10;#&#10;# DEFAULT_RELEASE_NOTES=&quot;Just another test version.&quot;&#10;#&#10;# Uncomment this line to skip the Distribution Lists input step and to use the default value:&#10;#&#10;# SKIP_DISTRIBUTION_LISTS=&quot;YES&quot;&#10;#&#10;# Uncomment this line to skip the Notify? input setp and to use the default value:&#10;#&#10;# SKIP_NOTIFY=&quot;YES&quot;&#10;#&#10;# Uncomment this line to enable loading Console.app&#10;#&#10;SHOW_DEBUG_CONSOLE=&quot;YES&quot;&#10;#&#10;# Uncomment this line to disable opening the browser with the TestFlight dashboard at the end of the ride&#10;#&#10;# DISABLE_OPEN_TESTFLIGHT_DASHBOARD=&quot;YES&quot;&#10;#&#10;# =====================================================================================================================&#10;&#10;# Do some existence checks for the build settings that this script depends on:&#10;if [ &quot;$CODE_SIGN_IDENTITY&quot; = &quot;&quot; -o &quot;$WRAPPER_NAME&quot; = &quot;&quot; -o &quot;$ARCHIVE_DSYMS_PATH&quot; = &quot;&quot; -o &quot;$ARCHIVE_PRODUCTS_PATH&quot; = &quot;&quot; -o &quot;$DWARF_DSYM_FILE_NAME&quot; = &quot;&quot; -o &quot;$INSTALL_PATH&quot; = &quot;&quot; ]; then&#10;osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;display dialog \&quot;It looks like we&apos;re missing build settings.\n\nYou can fix this by editing your scheme&apos;s Run Script action and selecting the appropriate target from the &apos;Provide build settings from...&apos; drop down menu.\&quot; buttons {\&quot;OK\&quot;} default button \&quot;OK\&quot; with icon stop&quot; -e &quot;end tell&quot;&#10;exit 1&#10;fi&#10;&#10;# Build paths from build settings environment vars:&#10;DSYM=&quot;$ARCHIVE_DSYMS_PATH/$DWARF_DSYM_FILE_NAME&quot;&#10;APP=&quot;$ARCHIVE_PRODUCTS_PATH/$INSTALL_PATH/$WRAPPER_NAME&quot;&#10;&#10;# Setup logging stuff...&#10;LOG=&quot;/tmp/testflight.log&quot;&#10;/bin/rm -f $LOG&#10;echo &quot;Starting TestFlight Upload Process&quot; &gt; $LOG&#10;if [ &quot;$SHOW_DEBUG_CONSOLE&quot; = &quot;YES&quot; ]; then&#10;/usr/bin/open -a /Applications/Utilities/Console.app $LOG&#10;fi&#10;&#10;# Ask if we need to proceed to upload to TestFlight using an AppleScript dialog in Xcode:&#10;SHOULD_UPLOAD=`osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;set noButton to \&quot;No, Thanks\&quot;&quot; -e &quot;set yesButton to \&quot;Let&apos;s take off!\&quot;&quot; -e &quot;set upload_dialog to display dialog \&quot;Do you want to upload this build to TestFlight?\&quot; buttons {noButton, yesButton} default button yesButton with icon 1&quot; -e &quot;set button to button returned of upload_dialog&quot; -e &quot;if button is equal to yesButton then&quot; -e &quot;return 1&quot; -e &quot;else&quot; -e &quot;return 0&quot; -e &quot;end if&quot; -e &quot;end tell&quot;`&#10;&#10;# Exit this script if the user indicated we shouldn&apos;t upload:&#10;if [ &quot;$SHOULD_UPLOAD&quot; = &quot;0&quot; ]; then&#10;echo &quot;User indicated not to upload this archive. Quitting.&quot; &gt;&gt; $LOG&#10;exit 0&#10;fi #SHOULD_UPLOAD&#10;&#10;&#10;# Now onto selecting signing identity and provisioning profiles...&#10;if [ &quot;$SKIP_RESIGNING_AND_REPROVISIONING&quot; != &quot;YES&quot; ]; then&#10;echo &gt;&gt; $LOG&#10;echo &quot;Finding signing identities...&quot; &gt;&gt; $LOG&#10;&#10;# Get all the user&apos;s code signing identities. Filter the response to get a neat list of quoted strings:&#10;SIGNING_IDENTITIES_LIST=`security find-identity -v -p codesigning | egrep -oE &apos;&quot;[^&quot;]+&quot;&apos;`&#10;echo &gt;&gt; $LOG&#10;echo &quot;Found identities:&quot; &gt;&gt; $LOG&#10;echo &quot;$SIGNING_IDENTITIES_LIST&quot; &gt;&gt; $LOG&#10;&#10;# Replace the newline characters in the list with commas and remove the last comma:&#10;SIGNING_IDENTITIES_COMMA_SEPARATED_LIST=`echo &quot;$SIGNING_IDENTITIES_LIST&quot; | tr &apos;\n&apos; &apos;,&apos; | sed &apos;s/,$//&apos;`&#10;# Present dialog with list of code signing identites and let the user pick one. The identity that from the build settings is selected by default.&#10;CODE_SIGN_IDENTITY=`osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;set selected_identity to {choose from list {$SIGNING_IDENTITIES_COMMA_SEPARATED_LIST} with prompt \&quot;Choose code signing identity:\&quot; default items {\&quot;$CODE_SIGN_IDENTITY\&quot;}}&quot; -e &quot;end tell&quot; -e &quot;return selected_identity&quot;`&#10;&#10;echo &gt;&gt; $LOG&#10;if [ &quot;$CODE_SIGN_IDENTITY&quot; = &quot;false&quot; ]; then&#10;echo &quot;User cancelled.&quot; &gt;&gt; $LOG&#10;exit 0&#10;fi&#10;&#10;echo &quot;Selected code signing identity:&quot; &gt;&gt; $LOG&#10;echo &quot;$CODE_SIGN_IDENTITY&quot; &gt;&gt; $LOG&#10;&#10;# Now onto the provisioning profiles...&#10;TEMP_MOBILEPROVISION_PLIST_PATH=/tmp/mobileprovision.plist&#10;TEMP_CERTIFICATE_PATH=/tmp/certificate.cer&#10;MOBILEDEVICE_PROVISIONING_PROFILES_FOLDER=&quot;${HOME}/Library/MobileDevice/Provisioning Profiles&quot;&#10;MATCHING_PROFILES_LIST=&quot;&quot;&#10;MATCHING_NAMES_LIST=&quot;&quot;&#10;cd &quot;$MOBILEDEVICE_PROVISIONING_PROFILES_FOLDER&quot;&#10;for MOBILEPROVISION_FILENAME in *.mobileprovision&#10;do&#10;# Use sed to rid the signature data that is padding the plist and store clean plist to temp file:&#10;sed -n &apos;/&lt;!DOCTYPE plist/,/&lt;\/plist&gt;/ p&apos; \&#10;&lt; &quot;$MOBILEPROVISION_FILENAME&quot; \&#10;&gt; &quot;$TEMP_MOBILEPROVISION_PLIST_PATH&quot;&#10;# The plist root dict contains an array called &apos;DeveloperCertificates&apos;. It seems to contain one element with the certificate data. Dump to temp file:&#10;/usr/libexec/PlistBuddy -c &apos;Print DeveloperCertificates:0&apos; $TEMP_MOBILEPROVISION_PLIST_PATH &gt; $TEMP_CERTIFICATE_PATH&#10;# Get the common name (CN) from the certificate (regex capture between &apos;CN=&apos; and &apos;/OU&apos;):&#10;MOBILEPROVISION_IDENTITY_NAME=`openssl x509 -inform DER -in $TEMP_CERTIFICATE_PATH -subject -noout | perl -n -e &apos;/CN=(.+)\/OU/ &amp;&amp; print &quot;$1&quot;&apos;`&#10;&#10;if [ &quot;$CODE_SIGN_IDENTITY&quot; = &quot;$MOBILEPROVISION_IDENTITY_NAME&quot; ]; then&#10;# Yay, this mobile provisioning profile matches up with the selected signing identity, let&apos;s continue...&#10;# Get the name of the provisioning profile:&#10;MOBILEPROVISION_PROFILE_NAME=`/usr/libexec/PlistBuddy -c &apos;Print Name&apos; $TEMP_MOBILEPROVISION_PLIST_PATH`&#10;MATCHING_PROFILES_LIST=`echo &quot;$MATCHING_PROFILES_LIST\&quot;$MOBILEPROVISION_PROFILE_NAME\&quot;|\&quot;$MOBILEPROVISION_FILENAME\&quot;,&quot;`&#10;MATCHING_NAMES_LIST=`echo &quot;$MATCHING_NAMES_LIST\&quot;$MOBILEPROVISION_PROFILE_NAME\&quot;,&quot;`&#10;fi&#10;done&#10;# Remove last comma:&#10;MATCHING_NAMES_LIST=`echo &quot;$MATCHING_NAMES_LIST&quot; | sed &apos;s/,$//&apos;`&#10;# Remove last pipe:&#10;MATCHING_PROFILES_LIST=`echo &quot;$MATCHING_PROFILES_LIST&quot; | sed &apos;s/,$//&apos;`&#10;&#10;echo &gt;&gt; $LOG&#10;echo &quot;Matching provisioning profiles:&quot; &gt;&gt; $LOG&#10;echo &quot;$MATCHING_PROFILES_LIST&quot; &gt;&gt; $LOG&#10;&#10;# Add the (default) value for using the existing embedded.mobileprovision:&#10;USE_EXISTING_PROFILE=&quot;\&quot;Don&apos;t overwrite the current provisioning profile\&quot;&quot;&#10;MATCHING_NAMES_LIST=`echo &quot;$USE_EXISTING_PROFILE,$MATCHING_NAMES_LIST&quot;`&#10;# Present dialog with list of matching provisioning profiles and let the user pick one.&#10;SELECTED_PROFILE_NAME=`osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;set selected_profile to {choose from list {$MATCHING_NAMES_LIST} with prompt \&quot;Choose provisioning profile:\&quot; default items {$USE_EXISTING_PROFILE}}&quot; -e &quot;end tell&quot; -e &quot;return selected_profile&quot;`&#10;if [ &quot;$SELECTED_PROFILE_NAME&quot; = &quot;false&quot; ]; then&#10;echo &quot;User cancelled.&quot; &gt;&gt; $LOG&#10;exit 0&#10;fi&#10;&#10;SELECTED_PROFILE_FILE=`echo &quot;$MATCHING_PROFILES_LIST&quot; | tr &quot;,&quot; &quot;\n&quot; | grep &quot;$SELECTED_PROFILE_NAME&quot; | tr &quot;|&quot; &quot;\n&quot; | sed -n 2p`&#10;&#10;echo &gt;&gt; $LOG&#10;echo &quot;Selected provisioning profile:&quot; &gt;&gt; $LOG&#10;if [ &quot;$SELECTED_PROFILE_FILE&quot; != &quot;&quot; ]; then&#10;# Remove quotes (needed before for AppleScript):&#10;SELECTED_PROFILE_FILE=`echo &quot;$SELECTED_PROFILE_FILE&quot; | tr -d &quot;\&quot;&quot;`&#10;EMBED_PROFILE=&quot;$MOBILEDEVICE_PROVISIONING_PROFILES_FOLDER/$SELECTED_PROFILE_FILE&quot;&#10;echo &quot;$SELECTED_PROFILE_FILE : $SELECTED_PROFILE_NAME&quot; &gt;&gt; $LOG&#10;echo &quot;$EMBED_PROFILE&quot; &gt;&gt; $LOG&#10;else&#10;EMBED_PROFILE=&quot;$APP/embedded.mobileprovision&quot;&#10;echo &quot;None selected. Keeping existing embedded.mobileprovision file:&quot; &gt;&gt; $LOG&#10;echo &quot;$EMBED_PROFILE&quot; &gt;&gt; $LOG&#10;fi&#10;&#10;fi #SKIP_RESIGNING_AND_REPROVISIONING&#10;&#10;# Now onto the Release Notes...&#10;if [ &quot;$DEFAULT_RELEASE_NOTES&quot; = &quot;&quot; ]; then&#10;# Bring up an AppleScript dialog in Xcode to enter the Release Notes for this (beta) build:&#10;NOTES=`osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;set notes_dialog to display dialog \&quot;Please provide some release notes:\nHint: use Ctrl-J for New Line.\&quot; default answer \&quot;\&quot; buttons {\&quot;Next\&quot;} default button \&quot;Next\&quot; with icon 1&quot; -e &quot;set notes to text returned of notes_dialog&quot; -e &quot;end tell&quot; -e &quot;return notes&quot;`&#10;else&#10;$NOTES=&quot;$DEFAULT_RELEASE_NOTES&quot;&#10;fi #DEFAULT_RELEASE_NOTES&#10;&#10;echo &quot;Added release notes:&quot; &gt;&gt; $LOG&#10;echo &quot;$NOTES&quot; &gt;&gt; $LOG&#10;&#10;# Now onto selecting the Distribution Lists...&#10;if [ &quot;$SKIP_DISTRIBUTION_LISTS&quot; != &quot;YES&quot; ]; then&#10;DISTRIBUTION_LISTS_QUOTED=`echo &quot;$DISTRIBUTION_LISTS&quot; | tr &quot;,&quot; &quot;\n&quot; | sed &apos;s/$/&quot;/&apos; | sed &apos;s/^/&quot;/&apos; | tr &quot;\n&quot; &quot;,&quot; | sed &apos;s/,$//&apos;`&#10;DISTRIBUTION_LISTS_DEFAULT_SELECTION_QUOTED=`echo &quot;$DISTRIBUTION_LISTS_DEFAULT_SELECTION&quot; | tr &quot;,&quot; &quot;\n&quot; | sed &apos;s/$/&quot;/&apos; | sed &apos;s/^/&quot;/&apos; | tr &quot;\n&quot; &quot;,&quot; | sed &apos;s/,$//&apos;`&#10;SELECTED_DISTRIBUTION_LISTS_QUOTED=`osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;set selected_profile to {choose from list {$DISTRIBUTION_LISTS_QUOTED} with prompt \&quot;Choose Distribution List(s):\&quot; default items {$DISTRIBUTION_LISTS_DEFAULT_SELECTION_QUOTED} with multiple selections allowed}&quot; -e &quot;end tell&quot; -e &quot;return selected_profile&quot;`&#10;if [ &quot;$SELECTED_DISTRIBUTION_LISTS_QUOTED&quot; = &quot;false&quot; ]; then&#10;echo &quot;User cancelled.&quot; &gt;&gt; $LOG&#10;exit 0&#10;fi&#10;&#10;SELECTED_DISTRIBUTION_LISTS=`echo &quot;$SELECTED_DISTRIBUTION_LISTS_QUOTED&quot; | sed &apos;s/, /,/&apos;`&#10;else&#10;SELECTED_DISTRIBUTION_LISTS=&quot;$DISTRIBUTION_LISTS_DEFAULT_SELECTION&quot;&#10;fi #SKIP_DISTRIBUTION_LISTS&#10;&#10;echo &gt;&gt; $LOG&#10;echo &quot;Selected Distribution Lists: &apos;$SELECTED_DISTRIBUTION_LISTS&apos;&quot; &gt;&gt; $LOG&#10;&#10;&#10;if [ &quot;$SKIP_NOTIFY&quot; != &quot;YES&quot; ]; then&#10;# Ask if we need to notify the permitted team members of the new build:&#10;if [ &quot;$DEFAULT_NOTIFY_VALUE&quot; = &quot;True&quot; ]; then&#10;SELECTED_NOTIFY_BUTTON=&quot;Yes, Please!&quot;&#10;else&#10;SELECTED_NOTIFY_BUTTON=&quot;No, Thanks&quot;&#10;fi&#10;SHOULD_NOTIFY=`osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;set noButton to \&quot;No, Thanks\&quot;&quot; -e &quot;set yesButton to \&quot;Yes, Please!\&quot;&quot; -e &quot;set upload_dialog to display dialog \&quot;Do you want to have your team members notified by TestFlight about this new version?\&quot; buttons {noButton, yesButton} default button yesButton with icon 1&quot; -e &quot;set button to button returned of upload_dialog&quot; -e &quot;if button is equal to yesButton then&quot; -e &quot;return \&quot;True\&quot;&quot; -e &quot;else&quot; -e &quot;return \&quot;False\&quot;&quot; -e &quot;end if&quot; -e &quot;end tell&quot;`&#10;else&#10;SHOULD_NOTIFY=&quot;$DEFAULT_NOTIFY_VALUE&quot;&#10;fi&#10;&#10;echo &gt;&gt; $LOG&#10;echo &quot;Notify: $SHOULD_NOTIFY&quot; &gt;&gt; $LOG&#10;&#10;# Final check before we start uploading:&#10;GO_UPLOAD=`osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;set noButton to \&quot;Cancel\&quot;&quot; -e &quot;set yesButton to \&quot;OK\&quot;&quot; -e &quot;set upload_dialog to display dialog \&quot;We&apos;re about to upload now.\n\nThere will be a dialog at the end of the upload to confirm, but there will be no progress feedback.\&quot; buttons {noButton, yesButton} default button yesButton with icon 1&quot; -e &quot;set button to button returned of upload_dialog&quot; -e &quot;if button is equal to yesButton then&quot; -e &quot;return 1&quot; -e &quot;else&quot; -e &quot;return 0&quot; -e &quot;end if&quot; -e &quot;end tell&quot;`&#10;# Exit this script if the user indicated we shouldn&apos;t upload:&#10;if [ &quot;$GO_UPLOAD&quot; = &quot;0&quot; ]; then&#10;echo &quot;User cancelled.&quot; &gt;&gt; $LOG&#10;exit 0&#10;fi #GO_UPLOAD&#10;&#10;# Now onto creating the IPA...&#10;echo &gt;&gt; $LOG&#10;echo &quot;Creating IPA at /tmp/app.ipa ...&quot; &gt;&gt; $LOG&#10;/bin/rm -f /tmp/app.ipa &gt;&gt; $LOG 2&gt;&amp;1&#10;if [ &quot;$SKIP_RESIGNING_AND_REPROVISIONING&quot; != &quot;YES&quot; ]; then&#10;/usr/bin/xcrun -sdk iphoneos PackageApplication &quot;${APP}&quot; -o /tmp/app.ipa --embed &quot;$EMBED_PROFILE&quot; --sign &quot;${CODE_SIGN_IDENTITY}&quot; &gt;&gt; $LOG 2&gt;&amp;1&#10;else&#10;/usr/bin/xcrun -sdk iphoneos PackageApplication &quot;${APP}&quot; -o /tmp/app.ipa &gt;&gt; $LOG 2&gt;&amp;1&#10;fi #SKIP_RESIGNING_AND_REPROVISIONING&#10;if [ &quot;$?&quot; -ne 0 ]; then&#10;echo &quot;There were errors creating IPA.&quot; &gt;&gt; $LOG&#10;osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;display dialog \&quot;There were errors creating IPA... Check $LOG\&quot; buttons {\&quot;OK\&quot;} with icon stop&quot; -e &quot;end tell&quot;&#10;/usr/bin/open -a /Applications/Utilities/Console.app $LOG&#10;exit 1&#10;fi&#10;echo &quot;Done creating IPA ...&quot; &gt;&gt; $LOG&#10;&#10;# Now onto creating the zipped .dSYM debugging symbols&#10;echo &gt;&gt; $LOG&#10;echo &quot;Zipping .dSYM at /tmp/app.dSYM.zip...&quot; &gt;&gt; $LOG&#10;/bin/rm -f &quot;/tmp/app.dSYM.zip&quot;&#10;/usr/bin/zip -r &quot;/tmp/app.dSYM.zip&quot; &quot;$DSYM&quot;&#10;echo &quot;Done zipping ...&quot; &gt;&gt; $LOG&#10;&#10;# Now onto the upload itself&#10;echo &gt;&gt; $LOG&#10;echo &quot;Uploading to TestFlight... &quot; &gt;&gt; $LOG&#10;&#10;/usr/bin/curl &quot;http://testflightapp.com/api/builds.json&quot; \&#10;-F file=@&quot;/tmp/app.ipa&quot; \&#10;-F dsym=@&quot;/tmp/app.dSYM.zip&quot; \&#10;-F api_token=&quot;$API_TOKEN&quot; \&#10;-F team_token=&quot;$TEAM_TOKEN&quot; \&#10;-F notify=&quot;$SHOULD_NOTIFY&quot; \&#10;-F distribution_lists=&quot;$SELECTED_DISTRIBUTION_LISTS&quot; \&#10;-F notes=&quot;$NOTES&quot; &gt;&gt; $LOG 2&gt;&amp;1&#10;if [ &quot;$?&quot; -ne 0 ]; then&#10;echo &quot;There were errors uploading.&quot; &gt;&gt; $LOG&#10;osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;display dialog \&quot;There were errors uploading... Check $LOG\&quot; buttons {\&quot;OK\&quot;} with icon stop&quot; -e &quot;end tell&quot;&#10;/usr/bin/open -a /Applications/Utilities/Console.app $LOG&#10;exit 1&#10;fi&#10;&#10;echo &gt;&gt; $LOG&#10;echo &quot;Uploaded to TestFlight!&quot; &gt;&gt; $LOG&#10;osascript -e &quot;tell application \&quot;Xcode\&quot;&quot; -e &quot;display dialog \&quot;Upload to TestFlight done!\&quot; buttons {\&quot;OK\&quot;} default button \&quot;OK\&quot;&quot; -e &quot;end tell&quot;&#10;&#10;if [ &quot;$DISABLE_OPEN_TESTFLIGHT_DASHBOARD&quot; != &quot;YES&quot; ]; then&#10;echo &gt;&gt; $LOG&#10;echo &quot;Opening https://testflightapp.com/dashboard/builds/ now...&quot; &gt;&gt; $LOG&#10;/usr/bin/open &quot;https://testflightapp.com/dashboard/builds/&quot;&#10;fi">
               <EnvironmentBuildable>
                  <BuildableReference
                     BuildableIdentifier = "primary"
                     BlueprintIdentifier = "E5E722F31311A12C00905959"
                     BuildableName = "HarkPad.app"
                     BlueprintName = "HarkPad"
                     ReferencedContainer = "container:HarkPad.xcodeproj">
                  </BuildableReference>
               </EnvironmentBuildable>
            </ActionContent>
         </ExecutionAction>
      </PostActions>
   </ArchiveAction>
</Scheme>
